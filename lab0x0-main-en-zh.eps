%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.4 (Build 16E195) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 502 502
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 502 502
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0 0 0 sc
q
0 502 m
502 502 l
502 0 l
0 0 l
0 502 l
h
W*
0 0 502 502 rc
-10 512 m
512 512 l
512 -10 l
-10 -10 l
h
f
Q
1 1 1 sc
q
118.50608 243.65976 m
126.66548 238.94543 134.09961 233.32452 140.98976 226.797 c
137.36336 222.80797 l
130.11057 229.33548 122.49512 235.13773 114.51704 240.03336 c
118.50608 243.65976 l
h
125.57756 263.78629 m
125.57756 299.68765 l
63.74744 299.68765 l
63.74744 273.57758 l
57.582561 273.57758 l
57.582561 305.12726 l
125.57756 305.12726 l
125.57756 320.35812 l
62.840839 320.35812 l
62.840839 325.79773 l
194.47917 325.79773 l
194.47917 320.35812 l
131.74245 320.35812 l
131.74245 305.12726 l
199.73744 305.12726 l
199.73744 273.57758 l
193.57257 273.57758 l
193.57257 299.68765 l
131.74245 299.68765 l
131.74245 263.96759 l
150.23709 248.73672 176.34717 236.04433 210.07269 226.25304 c
206.44629 220.99477 l
174.17133 230.78604 148.24257 243.65976 128.66 259.61594 c
106.9016 243.65976 80.610199 230.78604 50.148441 220.99477 c
46.522041 226.25304 l
78.434364 236.22565 104.90708 248.73672 125.57756 263.78629 c
h
76.802483 285.36337 m
112.70384 285.36337 l
112.70384 280.28641 l
76.802483 280.28641 l
76.802483 285.36337 l
h
76.439842 267.41269 m
112.88516 267.41269 l
112.88516 262.33572 l
76.439842 262.33572 l
76.439842 267.41269 l
h
144.97881 285.36337 m
180.33621 285.36337 l
180.33621 280.28641 l
144.97881 280.28641 l
144.97881 285.36337 l
h
144.79749 267.41269 m
180.88017 267.41269 l
180.88017 262.33572 l
144.79749 262.33572 l
144.79749 267.41269 l
h
93.846565 201.4122 m
105.81368 197.7858 117.23685 193.61543 128.11604 189.26376 c
142.259 196.8792 154.9514 205.76389 166.01193 215.55516 c
78.071724 215.55516 l
78.071724 221.17609 l
174.17133 221.17609 l
174.17133 216.46176 l
162.56685 205.0386 149.33049 195.06599 134.46225 186.54396 c
144.97881 182.19228 155.13272 177.47797 164.56137 172.401 c
161.29761 167.32404 l
138.45128 179.83511 114.87968 189.6264 90.582802 196.51656 c
93.846565 201.4122 l
h
W*
0 0 502 502 rc
36.522041 335.79773 m
220.07269 335.79773 l
220.07269 157.32404 l
36.522041 157.32404 l
h
f
Q
q
381.12839 236.3223 m
375.90323 244.00171 l
370.54611 236.3223 l
369.772 235.24911 369.11667 234.48381 368.58008 234.02638 c
368.04349 233.56897 367.36176 233.34026 366.53485 233.34026 c
365.62003 233.34026 364.84152 233.62614 364.19937 234.19792 c
363.55722 234.7697 363.23615 235.42505 363.23615 236.16396 c
363.23615 236.92047 363.72876 238.00244 364.71396 239.4099 c
371.23224 248.75186 l
365.45288 256.53683 l
364.45007 257.82114 363.94867 258.93829 363.94867 259.88834 c
363.94867 260.62726 364.24774 261.26941 364.84592 261.81479 c
365.44409 262.36017 366.22699 262.63287 367.19461 262.63287 c
368.03909 262.63287 368.7384 262.39536 369.2926 261.92035 c
369.84677 261.44534 370.49332 260.69763 371.23224 259.67722 c
375.90323 253.29091 l
380.44226 259.67722 l
381.19876 260.73282 381.8541 261.48932 382.40829 261.94675 c
382.96249 262.40417 383.65302 262.63287 384.47989 262.63287 c
385.42993 262.63287 386.21722 262.36459 386.84177 261.82797 c
387.46634 261.29138 387.77859 260.64484 387.77859 259.88834 c
387.77859 259.34296 387.65106 258.81955 387.39597 258.31815 c
387.14084 257.81674 386.74942 257.22299 386.22162 256.53683 c
380.44226 248.75186 l
386.96051 239.4099 l
387.98093 237.94966 388.49112 236.8501 388.49112 236.11118 c
388.49112 235.35468 388.17447 234.70374 387.54111 234.15834 c
386.90775 233.61295 386.12485 233.34026 385.19241 233.34026 c
384.36554 233.34026 383.6662 233.57776 383.09442 234.05278 c
382.52264 234.5278 381.86731 235.2843 381.12839 236.3223 c
h
W*
0 0 502 502 rc
353.23615 272.63287 m
398.49112 272.63287 l
398.49112 223.34026 l
353.23615 223.34026 l
h
f
Q
q
328.39893 278.95828 m
334.31396 278.95828 338.8624 276.41672 342.04437 271.33347 c
345.22635 266.25024 346.81729 259.11404 346.81729 249.92461 c
346.81729 241.02567 345.27255 233.96866 342.18301 228.7534 c
339.09344 223.53813 334.49881 220.93054 328.39893 220.93054 c
322.51031 220.93054 317.96848 223.46552 314.77332 228.53555 c
311.57816 233.60558 309.98059 240.73518 309.98059 249.92461 c
309.98059 258.84998 311.53192 265.92017 314.63467 271.13544 c
317.73743 276.35068 322.32547 278.95828 328.39893 278.95828 c
h
328.39893 226.63429 m
332.3071 226.63429 335.20514 228.48932 337.0932 232.19942 c
338.98126 235.90952 339.92526 241.81786 339.92526 249.92461 c
339.92526 258.05777 338.98126 263.96613 337.0932 267.64981 c
335.20514 271.3335 332.3071 273.17532 328.39893 273.17532 c
324.54361 273.17532 321.66534 271.28729 319.7641 267.51117 c
317.86282 263.73505 316.91223 257.87292 316.91223 249.92461 c
316.91223 241.87067 317.85623 235.97552 319.74429 232.23903 c
321.63235 228.50252 324.51721 226.63429 328.39893 226.63429 c
h
328.24051 255.86601 m
329.90411 255.86601 331.31021 255.29169 332.45889 254.14301 c
333.60757 252.99432 334.18192 251.58821 334.18192 249.92461 c
334.18192 248.20819 333.60098 246.73605 332.43909 245.50816 c
331.27722 244.28027 329.87769 243.66632 328.24051 243.66632 c
326.6297 243.66632 325.25 244.28027 324.10132 245.50816 c
322.95264 246.73605 322.37833 248.20819 322.37833 249.92461 c
322.37833 251.61462 322.93945 253.02734 324.06171 254.16281 c
325.18399 255.29829 326.5769 255.86601 328.24051 255.86601 c
h
421.71069 278.95828 m
427.62573 278.95828 432.17416 276.41672 435.35614 271.33347 c
438.53812 266.25024 440.12906 259.11404 440.12906 249.92461 c
440.12906 241.02567 438.58432 233.96866 435.49478 228.7534 c
432.40521 223.53813 427.81058 220.93054 421.71069 220.93054 c
415.82208 220.93054 411.28024 223.46552 408.08508 228.53555 c
404.88992 233.60558 403.29236 240.73518 403.29236 249.92461 c
403.29236 258.84998 404.84369 265.92017 407.94644 271.13544 c
411.04919 276.35068 415.63724 278.95828 421.71069 278.95828 c
h
421.71069 226.63429 m
425.61887 226.63429 428.51691 228.48932 430.40497 232.19942 c
432.29303 235.90952 433.23703 241.81786 433.23703 249.92461 c
433.23703 258.05777 432.29303 263.96613 430.40497 267.64981 c
428.51691 271.3335 425.61887 273.17532 421.71069 273.17532 c
417.85538 273.17532 414.97711 271.28729 413.07587 267.51117 c
411.17459 263.73505 410.224 257.87292 410.224 249.92461 c
410.224 241.87067 411.168 235.97552 413.05606 232.23903 c
414.94412 228.50252 417.82898 226.63429 421.71069 226.63429 c
h
421.55228 255.86601 m
423.21588 255.86601 424.62198 255.29169 425.77066 254.14301 c
426.91934 252.99432 427.49368 251.58821 427.49368 249.92461 c
427.49368 248.20819 426.91275 246.73605 425.75085 245.50816 c
424.58899 244.28027 423.18945 243.66632 421.55228 243.66632 c
419.94147 243.66632 418.56177 244.28027 417.41309 245.50816 c
416.2644 246.73605 415.69009 248.20819 415.69009 249.92461 c
415.69009 251.61462 416.25122 253.02734 417.37347 254.16281 c
418.49576 255.29829 419.88867 255.86601 421.55228 255.86601 c
h
W*
0 0 502 502 rc
299.98059 288.95828 m
450.12906 288.95828 l
450.12906 210.93054 l
299.98059 210.93054 l
h
f
Q
q
346.38916 304 m
318.63916 304 l
318.63916 354.9834 l
324.56494 354.9834 l
324.56494 309.16699 l
346.38916 309.16699 l
346.38916 304 l
h
396.28857 304 m
390.07373 304 l
384.43701 321.84961 l
367.70752 321.84961 l
361.99854 304 l
355.85596 304 l
372.51318 354.9834 l
379.63135 354.9834 l
396.28857 304 l
h
382.73877 327.0166 m
376.0542 348.11816 l
369.40576 327.0166 l
382.73877 327.0166 l
h
426.53174 331.9668 m
429.92825 331.17188 432.59 329.63022 434.51709 327.3418 c
436.44418 325.05338 437.40771 322.33139 437.40771 319.17578 c
437.40771 314.55075 435.72757 310.86523 432.36719 308.11914 c
429.00681 305.37305 424.966 304 420.24463 304 c
405.75537 304 l
405.75537 354.9834 l
419.8833 354.9834 l
424.79739 354.9834 428.63947 353.90546 431.40967 351.74951 c
434.17987 349.59357 435.56494 346.55243 435.56494 342.62598 c
435.56494 340.2171 434.76401 338.07324 433.16211 336.19434 c
431.56021 334.31543 429.3501 332.95444 426.53174 332.11133 c
426.53174 331.9668 l
h
411.68115 334.71289 m
418.61865 334.71289 l
425.86935 334.71289 429.49463 337.30237 429.49463 342.48145 c
429.49463 344.84213 428.60336 346.65479 426.8208 347.91943 c
425.03824 349.18408 422.42465 349.81641 418.97998 349.81641 c
411.68115 349.81641 l
411.68115 334.71289 l
h
411.68115 309.16699 m
418.40186 309.16699 l
422.32831 309.16699 425.44171 310.05826 427.74219 311.84082 c
430.04266 313.62338 431.19287 316.06833 431.19287 319.17578 c
431.19287 322.47592 430.06073 325.0293 427.79639 326.83594 c
425.53204 328.64258 422.25604 329.5459 417.96826 329.5459 c
411.68115 329.5459 l
411.68115 309.16699 l
h
334.45703 189.91016 m
314.79883 156.18945 l
334.10547 156.18945 l
334.10547 152 l
309.32031 152 l
309.32031 155.36914 l
328.89062 189.14844 l
310.16992 189.14844 l
310.16992 193.33789 l
334.45703 193.33789 l
334.45703 189.91016 l
h
369.08594 152 m
347.49414 152 l
347.49414 193.33789 l
368.91016 193.33789 l
368.91016 189.14844 l
352.29883 189.14844 l
352.29883 176.3457 l
368.26562 176.3457 l
368.26562 172.15625 l
352.29883 172.15625 l
352.29883 156.18945 l
369.08594 156.18945 l
369.08594 152 l
h
410.39453 152 m
404.38867 152 l
392.25977 170.7793 l
386.92773 170.7793 l
386.92773 152 l
382.12305 152 l
382.12305 193.33789 l
393.8125 193.33789 l
397.73831 193.33789 400.83887 192.38576 403.11426 190.48145 c
405.38965 188.57713 406.52734 185.9258 406.52734 182.52734 c
406.52734 180.0078 405.69727 177.76662 404.03711 175.80371 c
402.37695 173.84081 400.0918 172.50781 397.18164 171.80469 c
410.39453 152 l
h
386.92773 174.96875 m
392.99219 174.96875 l
395.53125 174.96875 397.5918 175.65723 399.17383 177.03418 c
400.75586 178.41113 401.54688 180.14452 401.54688 182.23438 c
401.54688 186.84378 398.73441 189.14844 393.10938 189.14844 c
386.92773 189.14844 l
386.92773 174.96875 l
h
429.93555 194.12891 m
434.56448 194.12891 438.09473 192.29787 440.52637 188.63574 c
442.95801 184.97362 444.17383 179.64651 444.17383 172.6543 c
444.17383 165.70114 442.96289 160.38869 440.54102 156.7168 c
438.11914 153.04491 434.58401 151.20898 429.93555 151.20898 c
425.32614 151.20898 421.80566 153.04002 419.37402 156.70215 c
416.94238 160.36427 415.72656 165.68161 415.72656 172.6543 c
415.72656 179.62698 416.9375 184.9492 419.35938 188.62109 c
421.78125 192.29298 425.30661 194.12891 429.93555 194.12891 c
h
429.93555 155.42773 m
436.02933 155.42773 439.07617 161.16986 439.07617 172.6543 c
439.07617 184.15826 436.02933 189.91016 429.93555 189.91016 c
426.9668 189.91016 424.70605 188.42091 423.15332 185.44238 c
421.60059 182.46385 420.82422 178.2012 420.82422 172.6543 c
420.82422 167.0488 421.5957 162.77638 423.13867 159.83691 c
424.68164 156.89745 426.94727 155.42773 429.93555 155.42773 c
h
W*
0 0 502 502 rc
299.32031 364.9834 m
454.17383 364.9834 l
454.17383 141.20898 l
299.32031 141.20898 l
h
f
Q
q
252 378.13727 m
252 123.8304 l
256.20001 123.8304 l
256.20001 378.13727 l
252 378.13727 l
h
W
0 0 502 502 rc
242 388.13727 m
266.20001 388.13727 l
266.20001 113.8304 l
242 113.8304 l
h
f
ep
end
%%Trailer
%%EOF
